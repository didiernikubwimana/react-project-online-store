{"ast":null,"code":"import Axios from 'axios';\nimport { useContext } from 'react';\nimport { CART_ADD_ITEM, CART_REMOVE_ITEM, CART_SAVE_SHIPPING_ADDRESS, CART_SAVE_PAYMENT_METHOD, CART_ADD_ITEM_FAIL } from '../constants/constants'; // import { APIConfig } from '../store/API-Config';\n\nexport const addToCart = (productId, qty) => async (dispatch, getState) => {\n  // const APIs = useContext(APIConfig);\n  // const productAPI = APIs.productAPI;\n  const {\n    data\n  } = await Axios.get(`http://localhost:8080/api/products` + '/' + productId);\n  const {\n    cart: {\n      cartItems\n    }\n  } = getState();\n\n  if (cartItems.length < 0) {\n    dispatch({\n      type: CART_ADD_ITEM_FAIL,\n      payload: `Can't Add To Cart. `\n    });\n  } else {\n    dispatch({\n      type: CART_ADD_ITEM,\n      payload: {\n        name: data.productName,\n        image: data.photo,\n        price: data.price,\n        countInStock: data.quantityInStock,\n        product: data.id,\n        seller: data.seller,\n        qty\n      }\n    });\n    localStorage.setItem('cartItems', JSON.stringify(getState().cart.cartItems));\n  }\n};\nexport const removeFromCart = productId => (dispatch, getState) => {\n  dispatch({\n    type: CART_REMOVE_ITEM,\n    payload: productId\n  });\n  localStorage.setItem('cartItems', JSON.stringify(getState().cart.cartItems));\n};\nexport const saveShippingAddress = data => dispatch => {\n  dispatch({\n    type: CART_SAVE_SHIPPING_ADDRESS,\n    payload: data\n  });\n  localStorage.setItem('shippingAddress', JSON.stringify(data));\n};\nexport const savePaymentMethod = data => dispatch => {\n  dispatch({\n    type: CART_SAVE_PAYMENT_METHOD,\n    payload: data\n  });\n};","map":{"version":3,"sources":["/Users/didier/Downloads/Projet/project/react-project-online-store/src/actions/cartActions.js"],"names":["Axios","useContext","CART_ADD_ITEM","CART_REMOVE_ITEM","CART_SAVE_SHIPPING_ADDRESS","CART_SAVE_PAYMENT_METHOD","CART_ADD_ITEM_FAIL","addToCart","productId","qty","dispatch","getState","data","get","cart","cartItems","length","type","payload","name","productName","image","photo","price","countInStock","quantityInStock","product","id","seller","localStorage","setItem","JSON","stringify","removeFromCart","saveShippingAddress","savePaymentMethod"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,QAA2B,OAA3B;AACA,SACEC,aADF,EAEEC,gBAFF,EAGEC,0BAHF,EAIEC,wBAJF,EAKEC,kBALF,QAMO,wBANP,C,CAOA;;AAEA,OAAO,MAAMC,SAAS,GAAG,CAACC,SAAD,EAAYC,GAAZ,KAAoB,OAAOC,QAAP,EAAiBC,QAAjB,KAA8B;AACzE;AACA;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAW,MAAMZ,KAAK,CAACa,GAAN,CAAW,oCAAD,GAAuC,GAAvC,GAA6CL,SAAvD,CAAvB;AACA,QAAM;AACJM,IAAAA,IAAI,EAAE;AAAEC,MAAAA;AAAF;AADF,MAEFJ,QAAQ,EAFZ;;AAGA,MAAII,SAAS,CAACC,MAAV,GAAmB,CAAvB,EAA0B;AACxBN,IAAAA,QAAQ,CAAC;AACPO,MAAAA,IAAI,EAAEX,kBADC;AAEPY,MAAAA,OAAO,EAAG;AAFH,KAAD,CAAR;AAID,GALD,MAKO;AACLR,IAAAA,QAAQ,CAAC;AACPO,MAAAA,IAAI,EAAEf,aADC;AAEPgB,MAAAA,OAAO,EAAE;AACPC,QAAAA,IAAI,EAAEP,IAAI,CAACQ,WADJ;AAEPC,QAAAA,KAAK,EAAET,IAAI,CAACU,KAFL;AAGPC,QAAAA,KAAK,EAAEX,IAAI,CAACW,KAHL;AAIPC,QAAAA,YAAY,EAAEZ,IAAI,CAACa,eAJZ;AAKPC,QAAAA,OAAO,EAAEd,IAAI,CAACe,EALP;AAMPC,QAAAA,MAAM,EAAEhB,IAAI,CAACgB,MANN;AAOPnB,QAAAA;AAPO;AAFF,KAAD,CAAR;AAYAoB,IAAAA,YAAY,CAACC,OAAb,CACE,WADF,EAEEC,IAAI,CAACC,SAAL,CAAerB,QAAQ,GAAGG,IAAX,CAAgBC,SAA/B,CAFF;AAID;AACF,CA9BM;AAgCP,OAAO,MAAMkB,cAAc,GAAIzB,SAAD,IAAe,CAACE,QAAD,EAAWC,QAAX,KAAwB;AACnED,EAAAA,QAAQ,CAAC;AAAEO,IAAAA,IAAI,EAAEd,gBAAR;AAA0Be,IAAAA,OAAO,EAAEV;AAAnC,GAAD,CAAR;AACAqB,EAAAA,YAAY,CAACC,OAAb,CAAqB,WAArB,EAAkCC,IAAI,CAACC,SAAL,CAAerB,QAAQ,GAAGG,IAAX,CAAgBC,SAA/B,CAAlC;AACD,CAHM;AAKP,OAAO,MAAMmB,mBAAmB,GAAItB,IAAD,IAAWF,QAAD,IAAc;AACzDA,EAAAA,QAAQ,CAAC;AAAEO,IAAAA,IAAI,EAAEb,0BAAR;AAAoCc,IAAAA,OAAO,EAAEN;AAA7C,GAAD,CAAR;AACAiB,EAAAA,YAAY,CAACC,OAAb,CAAqB,iBAArB,EAAwCC,IAAI,CAACC,SAAL,CAAepB,IAAf,CAAxC;AACD,CAHM;AAIP,OAAO,MAAMuB,iBAAiB,GAAIvB,IAAD,IAAWF,QAAD,IAAc;AACvDA,EAAAA,QAAQ,CAAC;AAAEO,IAAAA,IAAI,EAAEZ,wBAAR;AAAkCa,IAAAA,OAAO,EAAEN;AAA3C,GAAD,CAAR;AACD,CAFM","sourcesContent":["import Axios from 'axios';\nimport { useContext } from 'react';\nimport {\n  CART_ADD_ITEM,\n  CART_REMOVE_ITEM,\n  CART_SAVE_SHIPPING_ADDRESS,\n  CART_SAVE_PAYMENT_METHOD,\n  CART_ADD_ITEM_FAIL,\n} from '../constants/constants';\n// import { APIConfig } from '../store/API-Config';\n\nexport const addToCart = (productId, qty) => async (dispatch, getState) => {\n  // const APIs = useContext(APIConfig);\n  // const productAPI = APIs.productAPI;\n  const { data } = await Axios.get(`http://localhost:8080/api/products` + '/' + productId);\n  const {\n    cart: { cartItems },\n  } = getState();\n  if (cartItems.length < 0) {\n    dispatch({\n      type: CART_ADD_ITEM_FAIL,\n      payload: `Can't Add To Cart. `,\n    });\n  } else {\n    dispatch({\n      type: CART_ADD_ITEM,\n      payload: {\n        name: data.productName,\n        image: data.photo,\n        price: data.price,\n        countInStock: data.quantityInStock,\n        product: data.id,\n        seller: data.seller,\n        qty,\n      },\n    });\n    localStorage.setItem(\n      'cartItems',\n      JSON.stringify(getState().cart.cartItems)\n    );\n  }\n};\n\nexport const removeFromCart = (productId) => (dispatch, getState) => {\n  dispatch({ type: CART_REMOVE_ITEM, payload: productId });\n  localStorage.setItem('cartItems', JSON.stringify(getState().cart.cartItems));\n};\n\nexport const saveShippingAddress = (data) => (dispatch) => {\n  dispatch({ type: CART_SAVE_SHIPPING_ADDRESS, payload: data });\n  localStorage.setItem('shippingAddress', JSON.stringify(data));\n};\nexport const savePaymentMethod = (data) => (dispatch) => {\n  dispatch({ type: CART_SAVE_PAYMENT_METHOD, payload: data });\n};"]},"metadata":{},"sourceType":"module"}